# Generated by Django 4.2 on 2023-05-15 21:55

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contracts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100, verbose_name='Тип проводимых занятий')),
                ('hours', models.IntegerField(verbose_name='Количество проводимых часов')),
                ('beginning_date', models.DateTimeField(verbose_name='Дата начала контракта')),
                ('end_date', models.DateTimeField(verbose_name='Дата окончания контракта')),
            ],
        ),
        migrations.CreateModel(
            name='Courses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название специальности')),
                ('description', models.CharField(max_length=100, verbose_name='Описание специальности')),
                ('hours', models.IntegerField(verbose_name='Количество студентов')),
            ],
        ),
        migrations.CreateModel(
            name='Specialities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название специальности')),
                ('description', models.CharField(max_length=100, verbose_name='Описание специальности')),
                ('code', models.IntegerField(verbose_name='Номер специальности')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialityCourses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educational_division.courses')),
                ('speciality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educational_division.specialities')),
            ],
        ),
        migrations.AddField(
            model_name='specialities',
            name='speciality_courses',
            field=models.ManyToManyField(related_name='speciality_course', through='educational_division.SpecialityCourses', to='educational_division.courses', verbose_name='Курсы специальнсти'),
        ),
        migrations.CreateModel(
            name='Professors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=100, verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=100, verbose_name='Имя')),
                ('surname', models.CharField(max_length=100, verbose_name='Отчетсво')),
                ('email', models.CharField(max_length=100, verbose_name='Адрес электронной почты')),
                ('phone_number', models.CharField(max_length=100, verbose_name='Номер телефона')),
                ('courses', models.ManyToManyField(through='educational_division.Contracts', to='educational_division.courses')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(verbose_name='Номер группы')),
                ('student_count', models.IntegerField(verbose_name='Количество студентов группы')),
                ('specialty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educational_division.specialities')),
            ],
        ),
        migrations.AddField(
            model_name='contracts',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educational_division.courses'),
        ),
        migrations.AddField(
            model_name='contracts',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educational_division.group'),
        ),
        migrations.AddField(
            model_name='contracts',
            name='professor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educational_division.professors'),
        ),
        migrations.CreateModel(
            name='Acts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('worked_hours', models.IntegerField(verbose_name='Количество проводимых часов')),
                ('beginning_date', models.DateField(verbose_name='Дата начала периода')),
                ('end_date', models.DateField(verbose_name='Дата окончания периода')),
                ('creation_date', models.DateField(verbose_name='Дата создания акта')),
                ('contract', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='educational_division.contracts', verbose_name='Контракт')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Professor'), (2, 'Admin')], null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('professor_data', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='educational_division.professors')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
